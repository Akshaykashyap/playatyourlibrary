<?php
/**
 * @file
 * Code for the PLAY Library Program feature.
 */

include_once 'play_library_program.features.inc';

/**
 * Implements hook_field_widget_form_alter().
 */
function play_library_program_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['value']['#field_name']) && $element['value']['#field_name'] == 'field_activity_fired_hook') {
    $options = array(
      '' => t('- Select Firing Hook -'),
      'user_insert' => t('User just registered'),
    );
    // For now, only deal with nodes and other ECK content models.
    $entities = entity_get_info();
    foreach($entities as $entity_key => $entity) {
      if ($entity_key == 'node') {
        $entity['module'] = 'node';
      }
      if (isset($entity['module']) && ($entity['module'] == 'eck' || $entity['module'] == 'node')) {
        foreach ($entity['bundles'] as $bundle_key => $bundle_options) {
          $options["entity_insert|{$entity_key}|{$bundle_key}"] = t("Insert new @bundle", array('@bundle' => $bundle_options['label']));
        }
      }
    }
    $element['value']['#type'] = 'select';
    $element['value']['#options'] = $options;
    $element['value']['#size'] = 0;
  }
}

/**
 * Implements hook_user_insert().
 */
function play_library_program_user_insert(&$edit, $account, $category) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity');
  $query->fieldCondition('field_activity_fired_hook', 'value', 'user_insert');
  $result = $query->execute();
  foreach ($result as $entity_key => $entity_values) {
    if ($entity_key == 'activity') {
      foreach ($entity_values as $entity) {
        play_library_program_create_activity_entry($entity->id, $account->uid);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function play_library_program_entity_insert($entity, $type) {
  // Could be node, could be eck, could be something else, but easy to check.
  if (!isset($entity->type)) {
    return;
  }
  // Also hardcoding that we do not create *new* activity entries for an
  // activity entry.
  if ($entity->type !== 'activity_entry') {
    _play_library_program_invoke_activity_entry_hooks($entity, $type);
  }

  if ($entity->type == 'activity_entry') {
    _play_library_program_process_activity_entry($entity, $type);
  }

  if ($entity->type == 'reward_claim') {
    _play_library_program_process_user_reward_claim($entity, $type);
  }
}

/**
 * Implements hook_userpoints().
 */
function play_library_program_userpoints($op, &$params = array()) {
  if ($op == 'points after') {
    $user_points = userpoints_get_current_points($params['uid']);
    $user_pre_points = $user_points - $params['points'];
    $tier_rewards = _play_library_program_get_global_reward_ids($user_pre_points, $user_points);
    foreach ($tier_rewards as $rid) {
      play_library_program_create_reward_claim($rid, $params['uid']);
    }
    // Check global rewards
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
  }
}

/**
 * Retrieves how many times an activity has been performed.
 */
function play_library_program_retrieve_activity_participation($activity_id, $account_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity_entry');
  $query->propertyCondition('uid', $account_id);
  $query->fieldCondition('field_activity_entry_activity', 'target_id', $activity_id);
  return $query->count()->execute();
}

/**
 * Creates a new activity entry
 */
function play_library_program_create_activity_entry($activity_id, $account_id) {
  $activities = entity_load('activity', array($activity_id));
  $activity = reset($activities);
  $title = t("@activity on @time", array('@activity' => $activity->title, '@time' => date('Y-m-d H:i')));
  $activity_entry = entity_create('activity', array('type' => 'activity_entry', 'title' => $title, 'uid' => $account_id));
  $activity_entry->field_activity_entry_activity[LANGUAGE_NONE][0]['target_id'] = $activity->id;
  entity_save('activity', $activity_entry);
}

/**
 * Creates a new reward claim
 */
function play_library_program_create_reward_claim($reward_id, $account_id) {
  $rewards = entity_load('reward', array($reward_id));
  $reward = reset($rewards);
  $title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
  $reward_claim = entity_create('reward', array('type' => 'reward_claim', 'title' => $title, 'uid' => $account_id));
  $reward_claim->field_reward_claim_id[LANGUAGE_NONE][0]['target_id'] = $reward->id;
  entity_save('activity', $reward_claim);
}

/**
 * Creates a new raffle entry
 */
function play_library_program_create_raffle_entry($raffle_id, $account_id) {
  $raffles = entity_load('raffle', array($raffle_id));
  $raffle = reset($raffles);
  $title = t("@raffle on @time", array('@raffle' => $raffle->title, '@time' => date('Y-m-d H:i')));
  $raffle_entry = entity_create('raffle', array('type' => 'raffle_entry', 'title' => $title, 'uid' => $account_id));
  $raffle_entry->field_raffle_entry_raffle[LANGUAGE_NONE][0]['target_id'] = $raffle->id;
  entity_save('raffle', $raffle_entry);
}

/**
 * Creates a new badge entry
 */
function play_library_program_add_user_badge($badge_id, $account_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'badge');
  $query->entityCondition('bundle', 'user_badge');
  $query->propertyCondition('uid', $account_id);
  $query->fieldCondition('field_user_badge_id', 'target_id', $badge_id);
  $count = $query->count()->execute();
  if (!empty($count)) {
    return;
  }

  $badges = entity_load('badge', array($badge_id));
  $badge = reset($badges);
  $title = t("@badge on @time", array('@badge' => $badge->title, '@time' => date('Y-m-d H:i')));
  $user_badge = entity_create('badge', array('type' => 'user_badge', 'title' => $title, 'uid' => $account_id));
  $user_badge->field_user_badge_id[LANGUAGE_NONE][0]['target_id'] = $badge->id;
  entity_save('raffle', $user_badge);
}

/**
 * Performs general firing hook check to create new activity entries
 */
function _play_library_program_invoke_activity_entry_hooks($entity, $type) {
  $hook = "entity_insert|{$type}|{$entity->type}";
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity');
  $query->fieldCondition('field_activity_fired_hook', 'value', $hook);
  $result = $query->execute();
  foreach ($result as $entity_key => $entity_values) {
    if ($entity_key == 'activity') {
      foreach ($entity_values as $activity_entity) {
        $account = user_load($entity->uid);
        play_library_program_create_activity_entry($activity_entity->id, $account->uid);
      }
    }
  }
}

/**
 * Processes a reward claim.
 */
function _play_library_program_process_activity_entry($entity, $type) {
  // Start figure out which activity is associated with entry.
  $activity_id = $entity->field_activity_entry_activity[LANGUAGE_NONE][0]['target_id'];
  $activities = entity_load('activity', array($activity_id));
  $activity = reset($activities);
  $points = intval($activity->field_activity_points[LANGUAGE_NONE][0]['value']);
  $current_participation_count = play_library_program_retrieve_activity_participation($activity_id, $entity->uid);
  if ($points > 0 && $current_participation_count <= $activity->field_activity_limit[LANGUAGE_NONE][0]['value']) {
    $userpoints_txn = array(
      'uid' => $entity->uid,
      'points' => $points,
    );
    userpoints_userpointsapi($userpoints_txn);
  }
  // @TODO. Check against reward criteria.
}

/**
 * Processes a reward claim.
 */
function _play_library_program_process_user_reward_claim($entity, $type) {
  $account_uid = $entity->uid;
  $rewards = entity_load('reward', array($entity->field_reward_claim_id[LANGUAGE_NONE][0]['target_id']));
  $reward = reset($rewards);
  if (!empty($reward->field_reward_raffle)) {
    play_library_program_create_raffle_entry($reward->field_reward_raffle[LANGUAGE_NONE][0]['target_id'], $account_uid);
  }
  if (!empty($reward->field_reward_badge)) {
    play_library_program_add_user_badge($reward->field_reward_badge[LANGUAGE_NONE][0]['target_id'], $account_uid);
  }
}

/**
 * Retrieves how many times any activity has been performed.
 */
function _play_library_program_get_global_reward_ids($user_pre_points, $user_points) {
  // Create exclusion list of rewards which are tied to activities.
  $exclude_ids = array(-1);
  $query = db_select('field_data_field_reward_criteria_activity', 'fdfrca');
  $query->fields('fdfrca', array('entity_id'));
  $results = $query->execute();
  foreach ($results as $result) {
    $exclude_ids[] = $result->entity_id;
  }

  $rids = array();
  // Get the non-repeated rewards first.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'reward');
  $query->entityCondition('bundle', 'reward_criteria');
  $query->propertyCondition('id', $exclude_ids, 'NOT IN');
  $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_pre_points, '>');
  $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_points, '<=');
  $query->fieldCondition('field_reward_criteria_repeatable', 'value', 0);
  $results = $query->execute();
  if (!empty($results['reward'])) {
    foreach($results['reward'] as $reward) {
      $reward_entities = entity_load('reward', array($reward->id));
      $reward_entity = reset($reward_entities);
      $rids[] = $reward_entity->field_reward_criteria_reward[LANGUAGE_NONE][0]['target_id'];
    }
  }

  // Process the repeated ones next.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'reward');
  $query->entityCondition('bundle', 'reward_criteria');
  $query->propertyCondition('id', $exclude_ids, 'NOT IN');
  $query->fieldCondition('field_reward_criteria_repeatable', 'value', 1);
  $results = $query->execute();
  if (!empty($results['reward'])) {
    foreach($results['reward'] as $reward) {
      $reward_entities = entity_load('reward', array($reward->id));
      $reward_entity = reset($reward_entities);
      $modulus = $reward_entity->field_reward_criteria_point_mark[LANGUAGE_NONE][0]['value'];
      for ($i = $user_points; $i > $user_pre_points; $i--) {
        if ($i % $modulus == 0) {
          $rids[] = $reward_entity->field_reward_criteria_reward[LANGUAGE_NONE][0]['target_id'];
        }
      }
    }
  }

  return $rids;
}
