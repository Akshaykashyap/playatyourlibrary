<?php
/**
 * @file
 * Code for the PLAY Library Program feature.
 */

include_once 'play_library_program.features.inc';

/**
 * Implements hook_field_widget_form_alter().
 */
function play_library_program_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['value']['#field_name']) && $element['value']['#field_name'] == 'field_activity_fired_hook') {
    $options = array(
      '' => t('- Select Firing Hook -'),
      'user_insert' => t('User just registered'),
      'user_login' => t('User logged in for first time'),
    );
    // For now, only deal with nodes and other ECK content models.
    $entities = entity_get_info();
    foreach($entities as $entity_key => $entity) {
      if ($entity_key == 'node') {
        $entity['module'] = 'node';
      }
      if (isset($entity['module']) && ($entity['module'] == 'eck' || $entity['module'] == 'node')) {
        foreach ($entity['bundles'] as $bundle_key => $bundle_options) {
          $options["entity_insert|{$entity_key}|{$bundle_key}"] = t("Insert new @bundle", array('@bundle' => $bundle_options['label']));
        }
      }
    }
    $element['value']['#type'] = 'select';
    $element['value']['#options'] = $options;
    $element['value']['#size'] = 0;
  }
}

/**
 * Implements hook_user_insert().
 */
function play_library_program_user_insert(&$edit, $account, $category) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity');
  $query->fieldCondition('field_activity_fired_hook', 'value', 'user_insert');
  $result = $query->execute();
  foreach ($result as $entity_key => $entity_values) {
    if ($entity_key == 'activity') {
      foreach ($entity_values as $entity) {
        play_library_program_create_activity_entry($entity, $account);
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function play_library_program_entity_insert($entity, $type) {
  // Could be node, could be eck, could be something else, but easy to check.
  // Also hardcoding that we do not create *new* activity entries for an
  // activity entry.
  if (isset($entity->type) && $entity->type !== 'activity_entry') {
    $hook = "entity_insert|{$type}|{$entity->type}";
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', $hook);
    $result = $query->execute();
    foreach ($result as $entity_key => $entity_values) {
      if ($entity_key == 'activity') {
        foreach ($entity_values as $activity_entity) {
          $account = user_load($entity->uid);
          play_library_program_create_activity_entry($activity_entity, $account);
        }
      }
    }
  }
}

/**
 * Creates a new activity entry
 */
function play_library_program_create_activity_entry($entity, $account) {
  $activities = entity_load('activity', array($entity->id));
  $activity = reset($activities);
  $title = t("Performed Activity: @activity", array('@activity' => $activity->title));
  $activity_entry = entity_create('activity', array('type' => 'activity_entry', 'title' => $title, 'uid' => $account->uid));
  $activity_entry->field_activity_entry_activity[LANGUAGE_NONE][0]['target_id'] = $activity->id;
  entity_save('activity', $activity_entry);
}
