<?php
/**
 * @file
 * A module for private message in dashboard
 *
 * This module provides a block that displays
 * the recent message on patron dashboard.
 */

/**
 * Implementation of hook_menu()
 */
function private_msg_custom_teen_menu() {
  $items['my-reviews'] = array(
    'title' => 'Reviews',
    'page callback' => 'user_reviews_teen',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['my-booklist'] = array(
    'title' => 'Booklist',
    'page callback' => 'user_booklist_teen',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['rewards'] = array(
    'title' => 'Rewards',
    'page callback' => 'program_badges_rewards',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  // Adding link for setting purchase link for booklist
  $items['admin/config/system/platform_configuration'] = array(
	  'title' => 'Platform Configuration for teen program',
	  'description' => 'Chilco platform configuration page.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('platform_configuration_purchase_link_teen'),
	  'access arguments' => array('access administration pages'),
	  'type' => MENU_NORMAL_ITEM,
	  'file' => 'inc/platform_configuration_teen.inc',
	  'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

   $items['profile_avatar'] = array(
	  'title' => 'Profile Avatar',
	  'description' => 'providing tabs for different avatars',
	  'page callback' => 'drupal_get_form',
    'page arguments' => array('ajax_avatar_profile_checkboxes'),
	  'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
	  'file' => 'inc/platform_configuration_purchase_link.inc',
	  'file path' => drupal_get_path('module', 'private_msg_custom_teen'),
  );

  return $items;
}

/**
 * Implements function to check if program is active or not.
 *
 * @return Boolean
 *   0 if not active, 1 if active 
 */
function is_program_active_teen() {
  $program_start_date = variable_get('pmc_start_date', 0);
  $program_end_date = variable_get('pmc_end_date', 0);
  if ($program_start_date && $program_end_date) {
    $now = time();
    $program_start_date = strtotime($program_start_date);
    $program_end_date = strtotime($program_end_date);

    if (($now >= $program_start_date) && ($now <= $program_end_date)) {
      return 1;
    } else {
      drupal_set_message("The program is currently closed.");
      return 0;
    }
  }
  return 1;
}

function private_msg_custom_teen_init() {
  $program_start_date = variable_get('pmc_start_date', 0);
  $program_end_date = variable_get('pmc_end_date', 0);
  $setting = array('private_msg_custom_teen' => array('proStart' => $program_start_date, 'proEnd' => $program_end_date));
  drupal_add_js($setting, 'setting');
  
}


/**
 * Implementation of hook_form_profile2_edif_PROFILE_NAME_form_alter()
 */
function private_msg_custom_teen_form_profile2_edit_main_form_alter(&$form, $form_state) {

	$form['profile_main']['field_user_avatar'] = array('#attributes' => array('style' => 'display:none'));

  $query = db_select('field_data_field_avatar_type','type');
	$query->fields('type',array('field_avatar_type_tid','entity_id'));
	$query->join('eck_user_avatar','eck','eck.id = type.entity_id');
	$query->join('taxonomy_term_data','tax','tax.tid = type.field_avatar_type_tid');
	$query->fields('tax',array('name'));
  $query->fields('eck',array('title'));
	$query_avatar = $query->execute()->fetchAll();

	foreach ($query_avatar as $key => $value) {
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $avatar_name[$value->field_avatar_type_tid][] = $value->entity_id;
  }

  $num_avatar = !empty($form_state['values']['avatar_select']) ? $form_state['values']['avatar_select'] : 1;
  $none_array = array(0 => '-None-');
  $array2 = $none_array + $tax_name;

  $form['avatar_select'] = array(
    '#title' => t('Select your user avatar?'),
    '#type' => 'select',
    '#options' => $array2,
    '#ajax' => array(
      'callback' => 'ajax_autocheckboxes_callback_avatar_teen',
      'wrapper' => 'checkboxes-div',
      'effect' => 'slide',
      'progress' => array('type' => 'none'),
    ),
    //'#weight' => 5,
  );

  $form['checkboxes_fieldset'] = array(
    '#title' => t("Avatars"),
    '#prefix' => '<div id="checkboxes-div">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    //'#weight' => 5,
  );

	foreach ($avatar_name[$num_avatar] as $key => $value) {
		$form['checkboxes_fieldset']["avatar_checkbox-$value"] = array(
	    '#type' => 'checkbox',
	    '#title' => avatar_images_list_teen($value),
	    '#prefix' => '<div class="$value">',
	    '#suffix' => '</div>',
	    '#attributes' => array(
	        'class' => array(
	          'user_avatar'
	        ),
	     ),
  	);
	}

	array_unshift($form['#submit'], 'submit_for_avatar_teen');
}

function avatar_images_list_teen($value) {
  $query = db_select('field_data_field_avatar_image', 't');
  $query->join('file_managed', 'n', 'n.fid = t.field_avatar_image_fid');
  $result = $query
    ->fields('n', array('uri'))
    ->condition('t.entity_id', $value)
    ->execute();
    $img_uri = $result->fetchObject();
    $img_uri = $img_uri->uri;
    $style = 'avatar_style';
    $img_path = image_style_url($style, $img_uri);
    $img = "<img src='$img_path'>";
  return $img;
}


function ajax_autocheckboxes_callback_avatar_teen($form, $form_state) {
  return $form['checkboxes_fieldset'];
}

// submit handler for create user account form.
function submit_for_avatar_teen($form, $form_state) {
  foreach ($form_state['values'] as $key => $value) {
  	if($value == 1){
		  $avatar_entity = 'avatar_checkbox-';
	    $av_entity_id = strpos($key, $avatar_entity);

	    if ($av_entity_id !== false) {
	      // use sesion to pass avatar ID to profile presave hook.
	      $_SESSION['user_avatar_id'] = substr($key, 16);
	      break;
	    }
	  }
	}
}

/**
 * Implementation of hook_profile2_presave()
 */
function private_msg_custom_teen_profile2_presave($profile) {

	if (isset($_SESSION['user_avatar_id'])){
	  $profile->field_user_avatar[LANGUAGE_NONE][0]['target_id'] = $_SESSION['user_avatar_id'];
	  unset($_SESSION['user_avatar_id']);
	}
}

/**
 * Implementation of hook_form_alter()
 */
function private_msg_custom_teen_form_alter(&$form, &$form_state, $form_id) {

    $sub_title = 'Fill out the following form to submit your review! Reviews will be posted upon approval and you will be sent a notification when your review has posted';
    $catalog_link = variable_get('catalog_link_for_teen_program');
    $library_abbreviation = variable_get('library_abbreviation_for_teen');

  if($form_id == 'movie_review_node_form'){
    //hidding label for other option field
    $form['field_genre_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_movie_review'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the book in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';

    //Removing of N/A radio button
    unset($form['field_genre']['und']['#options']['_none']);
    unset($form['field_language']['und']['#options']['_none']);
    unset($form['field_rating']['und']['#options']['_none']);
    unset($form['field_please_select_one']['und']['#options']['_none']);

    //Changing default title
    drupal_set_title('Write a Movie Review');
  }

  if($form_id == 'music_review_node_form') {
    $form['field_artist_performer'][LANGUAGE_NONE][0]['#prefix'] = $sub_title;
    $form['title']['#title'] = t('Album or Song Title');
    $form['field_genre_other_option_music'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['field_catalog_link_music'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the book in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';

    unset($form['field_please_select_one_music']['und']['#options']['_none']);
    unset($form['field_genre_music']['und']['#options']['_none']);

    drupal_set_title('Write a Music Review');
  }

  if($form_id == 'video_game_review_node_form') {
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_video_game'][LANGUAGE_NONE][0]['#description'] = 'Please enter a link to the book in the <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.' catalog</a> so that other readers can find it easily.';
    $form['field_platform_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;

    unset($form['field_please_select_videogame']['und']['#options']['_none']);
    unset($form['field_age_rating_of_game']['und']['#options']['_none']);

    drupal_set_title('Write a Video Game Review');
  }

  if($form_id == 'review_book_node_form') {
    drupal_set_title('Write a Book Review');
  }

  if($form_id == 'user_register_form') {
  }

  if($form_id == 'booklist_node_form') {
    drupal_set_title('Create a Booklist');
  }

  if($form_id == 'review_activity_node_form') {
    drupal_set_title('Write an Activity Review');
  }

  // Adding purchase link for booklist
	if($form_id == 'booklist_node_form') {
		$form['purchase_link'] = array(
		  '#type' => 'link',
		  '#title' => 'Suggest a purchase',
		  '#href' => variable_get('pmc_purchase_link'),
		  '#attributes' => array('target' => '_blank'),
		  '#weight' => 3,
		);

		return $form;
	}
}

function user_reviews_teen() {
	return '';
}

function user_booklist_teen() {
  return '';
}

function program_badges_rewards() {
  return '';
}

/**
 * Implements hook_block_info().
 */
function private_msg_custom_teen_block_info() {
  $blocks = array();
  $blocks['pm_block'] = array(
    'info' => t('Private Message Dashboard Block for teen program'),
  );

  $blocks['homepage_slider'] = array(
    'info' => t('Homepage booklist slider Block for teen program'),
  );

  $blocks['menu_for_mobile'] = array(
    'info' => t('Menu block for mobile for teen program'),
  );

  $blocks['write_review_block'] = array(
    'info' => t('Write a review block'),
  );

  $blocks['program_rewards_block'] = array(
    'info' => t('Program Rewards Block teen'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function private_msg_custom_teen_block_view($delta = '') {
  $block = array();
  
  switch($delta) {
    case 'pm_block' :
      $block['content'] = pm_block_view_teen();
      break;

    case 'homepage_slider' :
      $block['content'] = homepage_slider_teen();
      break;

    case 'menu_for_mobile' :
      $block['content'] = header_menu_mobile_teen();
      break;

    case 'write_review_block' :
      $block['content'] = creating_review();
      break;

    case 'program_rewards_block' :
      $block['content'] = view_rewards_block();
      break;
  }
  
  return $block;
}

/**
 * Function callback for private_msg_custom_teen_block_view.
 */
function pm_block_view_teen() {

  global $user;
	$current_user = $user->uid;

  $query_pm = db_select('pm_index','pi');
  $query_pm->fields('pi',array('mid','is_new','deleted'));
  $query_pm->join('pm_message','pmsg','pmsg.mid = pi.mid');
  $query_pm->join('users','u','u.uid = pmsg.author');
  $query_pm->fields('u',array('name'));
  $query_pm->condition('recipient',$current_user,'=');
  $query_pm->condition('deleted',0,'=');
  $query_pm->orderBy('timestamp', 'DESC');
  $query_pm->range(0,2);
  $query = $query_pm->execute()
  ->fetchAll();

  $no_result = count($query);
  $output = '<div class = "pm-custom">';

  if ($no_result != 0) {
		foreach($query as $res) {
			$msg_id = $res->mid;
      $deleted = $res->deleted;
			$author = $res->name;

			$result = db_select('pm_message','pm')
			->fields('pm',array('subject','timestamp'))
			->condition('mid',$msg_id,'=')
			->execute()
			->fetchAssoc();

      $pm_new = $res->is_new.'<br/>';
      if($pm_new == 1){
        $new = '<div class = "pm-new">'.'NEW! '.'</div>';
      }

      $output .= '<div class="pm">'.'<div class = "pm-subject"><a href = '.'../messages/view/'.$msg_id.'>'.$new.$pm_subject = $result['subject'].'</a></div>'.'<div class = "pm-admin">'.$author.'</div>'.'<div class = "pm-date">'.$pm_date = date('F d, Y',$result['timestamp']).'</div>'.'</div>';
		}
    return $output.'<a class="pm-view" href="../messages">View All Messages</a>'.'</div>';
  } else {
    return 'No Messages to display';
  }
}

/**
 * Function callback for homepage booklist slider.
 */
function homepage_slider_teen(){

	$output .= '<ul class="booklist-pager"><input type="radio" name="colorRadio" id="r1" value="blslider1" checked><label for="r1"></label><input type="radio" name="colorRadio" id="r2" value="blslider2"><label for="r2"></label><input type="radio" name="colorRadio" id="r3" value="blslider3"><label for="r3"></label></ul>';
	$block = module_invoke('views', 'block_view', 'booklist_slideshow-block_2');
	$output .= '<div class="blslider1 slide">'. render($block['content']). '</div>';

	$block = module_invoke('views', 'block_view', 'booklist_slideshow-block_3');
	$output .= '<div class="blslider2 slide">'. render($block['content']). '</div>';

	$block = module_invoke('views', 'block_view', 'booklist_slideshow-block_4');
	$output .= '<div class="blslider3 slide">'. render($block['content']). '</div>';

	return $output;
}

/**
 * Function callback for header menu for mobile
 */
function header_menu_mobile_teen(){

	$block = module_invoke('views', 'block_view', 'top_block-block_2');
	$output .= render($block['content']). '</div>';

	$block = module_invoke('menu', 'block_view', 'menu-secoundary-menu-mobile');
	$output .= render($block['content']). '</div>';

	return $output;
}

/**
 * Function callback for creating reviews
 */
function creating_review($form, $form_state){

  global $base_url;

  $no_review = $base_url.'/reviews';
  $link_book_review = $base_url.'/node/add/review-book';
  $link_movie_review = $base_url.'/node/add/movie-review';
  $link_music_review = $base_url.'/node/add/music-review';
  $link_video_game_review = $base_url.'/node/add/video-game-review';
  $link_booklist = $base_url.'/node/add/booklist';
  $link_activity_review = $base_url.'/node/add/review-activity';

  $values = array(0 => t('Select Review'),
    $link_book_review => t('Book Reviews'),
    $link_activity_review => t('Activity Reviews'),
    $link_movie_review => t('Movie Reviews'),
    $link_music_review => t('Music Reviews'),
    $link_video_game_review => t('Video Game Reviews'),
    $link_booklist => t('Booklists'));

  $form['review_options'] = array(
    '#title' => t('Write A Review'),
    '#type' => 'select',
    '#description' => t('Select Review type'),
    '#options' => $values,
    '#attributes' => array(
      'class' => array('add_review_node')
    )
  );
  return $form;
}

function view_rewards_block(){
  $block = module_invoke('views', 'block_view', 'program_rewards-block_1');
  $output .= render($block['content']);

  $block = module_invoke('views', 'block_view', 'program_rewards_raffle-block_1');
  $output .= render($block['content']);

  return $output;
}