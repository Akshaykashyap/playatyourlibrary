<?php

/**
 * Implements hook_block(). . 
 */


function auto_role_allocation_block_info() {
   $block = array();
   $blocks['staff-notes'] = array(
        'info' => t('Write Staff notes'),
        'cache' => DRUPAL_NO_CACHE,
    );
   $blocks['calendar-data'] = array(
        'info' => t('Show calendar data json'),
        'cache' => DRUPAL_NO_CACHE,
    );
   $blocks['progress-block'] = array(
        'info' => t('Show Progress on user dashboard page'),
        'cache' => DRUPAL_NO_CACHE,
    );
   return $blocks;
}

function auto_role_allocation_block_view($block_name = '') {
	switch ($block_name) {
		case 'staff-notes':
            $block['subject'] = '';
            $block['content'] = drupal_get_form('generate_staff_form');
            break;
    case 'calendar-data':
            $block['subject'] = '';
            $block['content'] = generate_json_data();
            break;
    case 'progress-block':
            $block['subject'] = '';
            $block['content'] = user_progress();
            break;                
	}
  return $block;
}

function generate_staff_form($form, &$form_state) {
   $form['body'] = array(
      '#type' => 'textarea',
      '#title' => 'Staff Notes',
      
    );
   $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));  

  return $form;
}

function generate_staff_form_submit($form, &$form_state) {
	$staff_note = $form_state['complete form']['body']['#value'];
	$custom_uid = arg(1);
	$profile = profile2_create(array('type' => 'main', 'uid' => $custom_uid));
	$profile->field_staff_notes['und'][0]['value'] = $staff_note; 
	profile2_save($profile);
	drupal_set_message(t('Notes created.'));

  
}


function auto_role_allocation_init() {
  global $user;
  $setting = array('auto_role_allocation' => array('currentUser' => $user->uid));
  drupal_add_js($setting, 'setting');
     
}

function auto_role_allocation_menu() {
  $items['test'] = array(
    'title' => 'Test Page',
    'page callback' => 'test_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  // $items['staff/register'] = array(
  //   'title' => 'Staff registration',
  //   'page callback' => 'staff_registration',
  //   'access arguments' => array('access content'),
  //   'type' => MENU_SUGGESTED_ITEM,
  // );
  
  return $items;
}



function test_page() {
  global $user;
  $uid = $user->uid;
  $image_id = $_POST['id'];
  $event_image = $_POST['image'];
  $event_date = $_POST['date'];
  $event_uid = $_POST['user_id'];
  $event_time = strtotime($event_date);
  


if($image_id) {
    db_update('calendar')
    ->fields(array('image_url' => $event_image,'date' => $event_time))
    ->condition ('id', $image_id)
    ->execute();
}

else {
   $insert_query =db_insert('calendar')
      ->fields(array(
      'uid'=>$event_uid,
      'image_url'=>$event_image,
      'date'=>$event_time,
      ));
      $insert_query->execute();
        
        $response = array(
          "result"  =>  1
          );
        $node = node_load(364);
        //auto_role_allocation_node_update($current_node);
        /* this is for calendar activity*/
        $hook = "node_update|node|{$node->type}|updated";
        _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook, 1);
      }
}




function generate_json_data() {
   global $user;
  $uid = $user->uid;
  $current_time = time();
  $current_date = date('Y-m-d', $current_time);
  

   
  $query_state = db_select('calendar', 'c')
->fields('c', array('image_url','date','id'))
->orderBy('date', 'ASC')
->condition('uid', $uid)
->execute();
$result = $query_state->fetchAll();




$events = array();
$i = 1;
$j = 1;
foreach ($result as $value) {
$k = $i%10 ;
if($k==0) {
  

     $events[] = array(
    'title' => '<div><img data-id="'.$value->id.'" src="sites/default/files/styles/thumbnail/public/' . $value->image_url . '"</img>'.'Congratulations! You earned prize!</div>', 
    'date' => $value->date,
    );
  }
else {

 $events[] = array(
    'title' => '<div><img data-id="'.$value->id.'" src="sites/default/files/styles/thumbnail/public/' . $value->image_url . '"</img>'.'Read'.$i.'days</div>', 
    'date' => $value->date,
  );


  }

  
  $i++;
  $j++;
  
}

  $out = "<script>var eventsList = " . json_encode($events) . "</script>";
  return $out;
}


function user_progress() {
  global $user;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
     FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $count_days = $count_query[0]->image_url; 
  $i = $count_days%10;
  $j = 10-$i;
  return '<div>Total days read:'." ".$count_days.'</div></br><div>'.$j." ".'more days needed to receive your first prize'.'</div>';
}



function auto_role_allocation_menu_alter(&$items) {
  global $user;
  if($user->roles[1] == 'anonymous user') {
      $items['staff/register']['access callback'] = FALSE;
    
  }
  
}


