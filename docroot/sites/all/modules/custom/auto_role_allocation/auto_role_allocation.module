<?php

/**
 * Implements hook_block(). . 
 */


function auto_role_allocation_block_info() {
  $block = array();
  $blocks['staff-notes'] = array(
    'info' => t('Write Staff notes'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['calendar-data'] = array(
    'info' => t('Show calendar data json'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['progress-block'] = array(
    'info' => t('Progress'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['user_prize_block'] = array(
    'info' => t('User Progress Page Block'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['user_progress_for_program'] = array(
    'info' => t('User Progress block for program'),
    'cache' => DRUPAL_NO_CACHE,
    );
  return $blocks;
}

function auto_role_allocation_block_view($block_name = '') {
  switch ($block_name) {
    case 'staff-notes':
    $block['subject'] = '';
    $block['content'] = drupal_get_form('generate_staff_form');
    break;
    case 'calendar-data':
    $block['subject'] = '';
    $block['content'] = generate_json_data();
    break;
    case 'progress-block':
    $block['subject'] = '';
    $block['content'] = user_progress();
    break;
    case 'user_prize_block':
    $block['subject'] = '';
    $block['content'] = progress_user_block();
    break;
    case 'user_progress_for_program':
    $block['subject'] = '';
    $block['content'] = progress_user_block_program();
    break;                                
  }
  return $block;
}

/* Progress block of user on program page */
function progress_user_block_program() {
  global $user, $base_url;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
    FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $total_read_days = $count_query[0]->image_url;

  // get all rewards
  $qry = db_select('field_data_field_activity_fired_hook', 'fh');
  $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
  $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
  $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
  $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
  $qry->fields('ap', array('field_activity_points_value'));
  $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
  $rs = $qry->execute()->fetchAll();
  
  $activity_point = 0;
  $next_reward_in_days = 0;
  $user_points = 0;
  $closest_reward = 0;

  foreach($rs as $v) {
    if (!$activity_point) {
      $activity_point = $v->field_activity_points_value;
      $user_points = $total_read_days * $activity_point;
    }

    $reward_point = $v->field_reward_criteria_point_mark_value;
    if ($reward_point > $user_points) {
      if(!$closest_reward) {
        $closest_reward = $reward_point;
      } else {
        if($reward_point < $closest_reward) {
          $closest_reward = $reward_point;
        }
      }
    }
  }

  $reads_for_next_reward = ($closest_reward / $activity_point) - $total_read_days;
  if($reads_for_next_reward < 0) {
    return "<div class='all_rewrad_won'>Congratulations! You have completed the reading program and have received all the reading rewards.</div>";
  }
  else {
    $msg = "<span class='msg-highlight'>Total days read: $total_read_days</span><br/>";
    $msg .= "<div class='days-left'>$reads_for_next_reward more days read needed to receive your next prize</div>";
    $msg .= "<div><a href='".$base_url."/progress'>Go to the Progress Page</a></div>";

    return "<div>$msg</div>";
  }
}

function progress_user_block() {
  global $user;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
    FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $total_read_days = $count_query[0]->image_url;

  // get all rewards
  $qry = db_select('field_data_field_activity_fired_hook', 'fh');
  $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
  $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
  $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
  $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
  $qry->fields('ap', array('field_activity_points_value'));
  $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
  $rs = $qry->execute()->fetchAll();
  
  $activity_point = 0;
  $next_reward_in_days = 0;
  $user_points = 0;
  $closest_reward = 0;

  foreach($rs as $v) {
    if (!$activity_point) {
      $activity_point = $v->field_activity_points_value;
      $user_points = $total_read_days * $activity_point;
    }

    $reward_point = $v->field_reward_criteria_point_mark_value;
    if ($reward_point > $user_points) {
      if(!$closest_reward) {
        $closest_reward = $reward_point;
      } else {
        if($reward_point < $closest_reward) {
          $closest_reward = $reward_point;
        }
      }
    }
  }

  $reads_for_next_reward = ($closest_reward / $activity_point) - $total_read_days;
  if($reads_for_next_reward < 0) {
    return "<div class='all_rewrad_won'>Congratulations! You have completed the reading program and have received all the reading rewards.</div>";
  }
  else {
    $msg = "$reads_for_next_reward more reads needed to receive your next prize";

    return "<div>$msg</div>";
  }
  
}

function generate_staff_form($form, &$form_state) {
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Staff Notes',
    
    );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));  

  return $form;
}

function generate_staff_form_submit($form, &$form_state) {
  $staff_note = $form_state['complete form']['body']['#value'];
  $custom_uid = arg(1);
  $profile = profile2_create(array('type' => 'main', 'uid' => $custom_uid));
  $profile->field_staff_notes['und'][0]['value'] = $staff_note; 
  profile2_save($profile);
  drupal_set_message(t('Notes created.'));

  
}


function auto_role_allocation_init() {
  global $user;
  $setting = array('auto_role_allocation' => array('currentUser' => $user->uid));
  drupal_add_js($setting, 'setting');
  
}

function auto_role_allocation_menu() {
  $items['calendar'] = array(
    'title' => 'Test Page',
    'page callback' => 'calendar_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    );
  $items['raffle'] = array(
    'title' => 'Raffle entry list',
    'page callback' => 'drupal_get_form',
    'page arguments'=>array('raffle_entry_process'),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  
  return $items;
}


/* fuction for raffle entry process */

function raffle_entry_process($form, &$form_state) {
  $library_branch = taxonomy_get_tree(7);
  foreach ($library_branch as $value) {
    $form['libarary_branch_'.$value->tid]=array(
      '#type'=>'checkbox',
      '#title' =>$value->name,
      //'#value'=>$value->name,
    );
  }
    $form['user_greater']=array(
      '#type'=>'textfield',
      '#title' =>'Points greater than',
      
    );
    $form['user_lesser']=array(
      '#type'=>'textfield',
      '#title' =>'Points lesser than',
      
    );
    $form['user_age_from']=array(
      '#type'=>'textfield',
      '#title' =>'User age From',
      
    );
    $form['user_age_to']=array(
      '#type'=>'textfield',
      '#title' =>'User age to',
      
    );
    $form['submit']=array(
      '#type'=>'submit',
      '#title' =>'Submit',
      '#value'=>'Submit',
      
    );

  
  return $form;
  
}

function raffle_entry_process_submit(&$form, &$form_state) {
  $user_points_greater_than = $form_state['values']['user_greater'];
  $user_points_lesser_than = $form_state['values']['user_lesser']; 
  $user_age_from = $form_state['values']['user_age_from'];
  $user_age_to = $form_state['values']['user_age_to'];

  $current = date('Y');
  $age_from = $current - $user_age_from;
  $age_to = $current - $user_age_to;




  foreach ($form_state['values'] as $key => $value) {
    $rid = substr($key, 16);
    if($value == '1'){
      $test[$rid] = $key;
  
    }
  }
  foreach ($test as $libarary_branch_id => $val) {
    $libarary_id[] = $libarary_branch_id;
  }

  $qry = db_select('field_data_field_library_branch', 'lb');

  $qry->fields('lb', array('entity_id'));

  $qry->condition('lb.field_library_branch_tid', $libarary_id);
  $rs = $qry->execute()->fetchAll();
  foreach ($rs as $entity_id) {
    $entity[] = $entity_id->entity_id; 
    
  }


  $dob = db_select('field_data_field_user_birthday', 'ub');
  $dob->fields('ub', array('field_user_birthday_value'));
  $dob->condition('ub.entity_id', $entity);
  $date = $dob->execute()->fetchAll();
  foreach ($date as $date_value) {
    $date_o_b = explode('-', $date_value->field_user_birthday_value); 
    $date_year[] = $current - $date_o_b[0]; 
    
    
  }




  
  
 
  
  



$query = db_select('profile', 'p');
$query->join('userpoints', 'up', 'up.pid = p.pid');
$query->fields('up', array('uid'));
$query->condition('p.pid', $entity);
$query->condition('up.max_points', $user_points_greater_than, '>=');
$query->condition('up.max_points', $user_points_lesser_than, '<=');

$res = $query->execute()->fetchAll();

//__toString($res);
print_r($res);
die();






//   $query = db_select('userpoints', 'up');
// $query->fields('up', array('uid'));
// $query->condition('up.max_points', $user_points_greater_than, '>=');
// $query->condition('up.max_points', $user_points_lesser_than, '<=');

// $res = $query->execute()->fetchAll();
// //__toString($res);
// print_r($res);
// die();



  


//   $qry = db_select('field_data_field_activity_fired_hook', 'fh');
//   $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
//   $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
//   $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
//   $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
//   $qry->fields('ap', array('field_activity_points_value'));
//   $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
//   $rs = $qry->execute()->fetchAll();

// print_r($rs);die();








 //print_r($libarary_id);
 //echo $user_points_greater_than.'----'.$user_points_lesser_than.'------'.$user_age_from.'------'. $user_age_to;die(); 
}


/* function for restrict calendar date for only one drop*/

function calendar_date_restriction($uid, $event_date) {
  $sticker_count = db_select('calendar', 'c')
  ->fields('c', array('image_url'))
  ->condition('uid', $uid,'=')
  ->condition('date', $event_date,'=')
  ->execute();
  $no_of_sticker = $sticker_count->rowCount();
  if($no_of_sticker > 1) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}



function calendar_page() {
  global $user;
  $uid = $user->uid;
  $image_id = $_REQUEST['id'];
  $event_image = $_REQUEST['image'];
  $event_uid = $_REQUEST['user_id'];

  // get timestamp from calendar date
  $event_date = $_REQUEST['date'];
  $event_date = explode(' ', $event_date);
  $mth = strtolower($event_date[1]);
  $dt = $event_date[2];
  $yr = $event_date[3];
  $month = array('jan' => 1,
    'feb' => 2,
    'mar' => 3,
    'apr' => 4,
    'may' => 5,
    'jun' => 6,
    'jul' => 7,
    'aug' => 8,
    'sep' => 9,
    'oct' => 10,
    'nov' => 11,
    'dec' => 12);
  $mth = $month[$mth];
  $event_time = mktime(0, 0, 0, $mth, $dt, $yr);

  $sticker_count = db_select('calendar', 'c')
  ->fields('c', array('image_url'))
  ->condition('uid', $event_uid)
  ->condition('date', $event_time)
  ->execute();
  $no_of_sticker = $sticker_count->rowCount();

  $query_date = db_select('calendar', 'c')
  ->fields('c', array('date'))
  ->condition('uid', $event_uid)
  ->condition('reward_id', 0, '>')
  ->orderBy('id', 'DESC')
  ->execute();
  $reward_date = $query_date->fetchAssoc();
  $reward_date = $reward_date['date']; 
  //print_r($reward_date['date']);die();

  
  if(!$reward_date) {
    
    if (!$no_of_sticker) {
      if($image_id) {
        db_update('calendar')
        ->fields(array('image_url' => $event_image,'date' => $event_time))
        ->condition ('id', $image_id)
        ->execute();
      }
      else {
        $insert_query =db_insert('calendar')
        ->fields(array(
          'uid'=>$event_uid,
          'image_url'=>$event_image,
          'date'=>$event_time,
          ));
        $insert_query->execute();

      // get the just inserted ID from calendar table
      // this will be used to update the record for reward
      // if user receives one after this activity.
        $query = db_select('calendar');
        $query->addExpression('MAX(id)');
        $max_id = $query->execute()->fetchField();
        $_SESSION['usr_calendar_id'] = $max_id;
        
        $response = array(
          "result"  =>  1
          );
        $node = node_load(495);//495
      //auto_role_allocation_node_update($current_node);
        /* this is for calendar activity*/
        $hook = "node_update|node|{$node->type}|updated";
        _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook, 1);
      }
      echo 1;
    } else {
      echo 0;
    }
  }
  else {
    
    if($reward_date > $event_time) {
      
      return FALSE;
    }

    else {
      if (!$no_of_sticker) {
        if($image_id) {
          db_update('calendar')
          ->fields(array('image_url' => $event_image,'date' => $event_time))
          ->condition ('id', $image_id)
          ->execute();
        }
        else {
          $insert_query =db_insert('calendar')
          ->fields(array(
            'uid'=>$event_uid,
            'image_url'=>$event_image,
            'date'=>$event_time,
            ));
          $insert_query->execute();

      // get the just inserted ID from calendar table
      // this will be used to update the record for reward
      // if user receives one after this activity.
          $query = db_select('calendar');
          $query->addExpression('MAX(id)');
          $max_id = $query->execute()->fetchField();
          $_SESSION['usr_calendar_id'] = $max_id;
          
          $response = array(
            "result"  =>  1
            );
        $node = node_load(495);//495
      //auto_role_allocation_node_update($current_node);
        /* this is for calendar activity*/
        $hook = "node_update|node|{$node->type}|updated";
        _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook, 1);
      }
      echo 1;
    } else {
      echo 0;
    }
  }
}

}




function generate_json_data() {
  global $user;
  $uid = $user->uid;
  $current_time = time();
  $current_date = date('Y-m-d', $current_time);


  
  $query_state = db_select('calendar', 'c')
  ->fields('c', array('image_url','date','id', 'reward_id'))
  ->orderBy('date', 'ASC')
  ->condition('uid', $uid)
  ->execute();
  $result = $query_state->fetchAll();




  $events = array();
  $i = 1;
  $j = 1;
  foreach ($result as $value) {
    $reward_claimed = $value->reward_id;

    if($reward_claimed) {

      $events[] = array(
        'title' => '<div><div class="reward_image"><img data-id="'.$value->id.'" src="sites/default/files/styles/thumbnail/public/' . $value->image_url . '"</img></div>'.'<div class="reward_text">Congratulations! You earned prize!</div></div>', 
        'date' => $value->date,
        );
    }
    else {
     if($i == 1) {
      $events[] = array(
        'title' => '<div><div class="event_image"><img data-id="'.$value->id.'" src="sites/default/files/styles/thumbnail/public/' . $value->image_url . '"</img></div>'.'<div class="event_no">Read ' .$i. ' day</div></div>', 
        'date' => $value->date,
        );
    }

    else {
      $events[] = array(
        'title' => '<div><div class="event_image"><img data-id="'.$value->id.'" src="sites/default/files/styles/thumbnail/public/' . $value->image_url . '"</img></div>'.'<div class="event_no">Read ' .$i. ' days</div></div>', 
        'date' => $value->date,
        );
    }  


    }

    
    $i++;
    $j++;
    
  }

  $out = "<script>var eventsList = " . json_encode($events) . "</script>";
  return $out;
}


function user_progress() {
  global $user;
  $uid = $user->uid;
  $count_query = db_query("SELECT COUNT(image_url) as image_url
    FROM {calendar} c
    WHERE c.uid = :uid",array(':uid' => $uid))->fetchAll();
  $total_read_days = $count_query[0]->image_url;

  // get all rewards
  $qry = db_select('field_data_field_activity_fired_hook', 'fh');
  $qry->join('field_data_field_activity_points', 'ap', 'ap.entity_id = fh.entity_id');
  $qry->Join('field_data_field_reward_criteria_activity', 'rca', 'fh.entity_id = rca.field_reward_criteria_activity_target_id');
  $qry->Join('field_data_field_reward_criteria_point_mark', 'rcpm', 'rca.entity_id = rcpm.entity_id');
  $qry->fields('rcpm', array('field_reward_criteria_point_mark_value'));
  $qry->fields('ap', array('field_activity_points_value'));
  $qry->condition('fh.field_activity_fired_hook_value', 'node_update|node|sticker|updated');
  $rs = $qry->execute()->fetchAll();
  
  $activity_point = 0;
  $next_reward_in_days = 0;
  $user_points = 0;
  $closest_reward = 0;

  foreach($rs as $v) {
    if (!$activity_point) {
      $activity_point = $v->field_activity_points_value;
      $user_points = $total_read_days * $activity_point;
    }

    $reward_point = $v->field_reward_criteria_point_mark_value;
    if ($reward_point > $user_points) {
      if(!$closest_reward) {
        $closest_reward = $reward_point;
      } else {
        if($reward_point < $closest_reward) {
          $closest_reward = $reward_point;
        }
      }
    }
  }

  $reads_for_next_reward = ($closest_reward / $activity_point) - $total_read_days;

  if($reads_for_next_reward < 0) {
    return "<div class='all_rewrad_won'>Congratulations! You have completed the reading program and have received all the reading rewards.</div>";
  }
  else {
    $msg = "<span class='msg-highlight'>Total days read: $total_read_days</span><br/>";
    $msg .= "$reads_for_next_reward more days read needed to receive your next prize";

    return "<div>$msg</div>";
  }
}




function auto_role_allocation_menu_alter(&$items) {
  global $user;
  if($user->roles[1] == 'anonymous user') {
    $items['staff/register']['access callback'] = FALSE;

  }

}



